PACKAGE = "mmdrsot"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#arguments:
; name - a string which specifies the name under which this parameter should be stored
;
; paramtype - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t
;
; level - A bitmask which will later be passed to the dynamic reconfigure callback.
#When the callback is called all of the level values for parameters that have been changed
# are ORed together and the resulting value is passed to the callback.
;
; description - string which describes the parameter
;
; default - specifies the default value
;
; min - specifies the min value (optional and does not apply to strings and bools)
;
; max - specifies the max value (optional and does not apply to strings and bools)
gen.add("H_min",    int_t,    0, "Min hue", 0,  0, 180)
gen.add("H_max",    int_t,    0, "Max hue", 180,  0, 180)
gen.add("S_min",    int_t,    0, "Min saturation", 0,  0, 255)
gen.add("S_max",    int_t,    0, "Max saturation", 255,  0, 255)
gen.add("V_min",    int_t,    0, "Min value", 0,  0, 255)
gen.add("V_max",    int_t,    0, "Max value", 255,  0, 255)

gen.add("hough_accum_resolution",   double_t, 0, "hough_accum_resolution", 1.2,  0.0, 10.0)
gen.add("min_circle_dist",    		int_t,    0, "min_circle_dist", 25,  0, 200)
gen.add("canny_edge_th",    		int_t,    0, "canny_edge_th", 50,  0, 200)
gen.add("hough_accum_th",    		int_t,    0, "hough_accum_th", 12,  0, 100)
gen.add("min_radius",    		int_t,    0, "min_radius", 0,  0, 200)
gen.add("max_radius",    		int_t,    0, "max_radius", 50,  0, 200)

exit(gen.generate(PACKAGE, "mmdrsot", "ColorRange"))
# The second parameter == name of a node this could run in.
# The third parameter == cfg file name, without extension.
# Otherwise the libraries will be generated in every build,
# forcing a recompilation of the nodes which use them.